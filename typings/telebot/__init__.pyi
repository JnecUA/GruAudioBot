"""
This type stub file was generated by pyright.
"""

import re
import requests
import time

class TeleBot:
    def __init__(self, import_name) -> None:
        ...
    
    def add_update_rule(self, rule, endpoint=..., view_func=..., **options): # -> None:
        ...
    
    def route(self, rule, **options): # -> (f: Unknown) -> Unknown:
        """A decorator that is used to register a view function for a
        given URL rule.  This does the same thing as :meth:`add_url_rule`
        but is intended for decorator usage::
            @app.route('/')
            def index():
                return 'Hello World'
        For more information refer to :ref:`url-route-registrations`.
        :param rule: the URL rule as string
        :param endpoint: the endpoint for the registered URL rule.  Flask
                         itself assumes the name of the view function as
                         endpoint
        :param options: the options to be forwarded to the underlying
                        :class:`~werkzeug.routing.Rule` object.  A change
                        to Werkzeug is handling of method options.  methods
                        is a list of methods this rule should be limited
                        to (``GET``, ``POST`` etc.).  By default a rule
                        just listens for ``GET`` (and implicitly ``HEAD``).
                        Starting with Flask 0.6, ``OPTIONS`` is implicitly
                        added and handled by the standard request handling.
        """
        ...
    
    def process_update(self, update): # -> None:
        ...
    
    def process_updates(self, updates): # -> None:
        ...
    
    def poll(self, offset=..., poll_timeout=..., cooldown=..., debug=...):
        '''These should also be in the config section, but some here for
        overrides

        '''
        ...
    
    def listen(self):
        ...
    
    def get_me(self):
        '''A simple method for testing your bot's auth token. Requires no
        parameters. Returns basic information about the bot in form of a `User
        object.

        '''
        ...
    
    def send_message(self, chat_id, text):
        ...
    
    def forward_message(self):
        ...
    
    def send_photo(self):
        ...
    
    def send_audio(self):
        ...
    
    def send_document(self):
        ...
    
    def send_sticker(self):
        ...
    
    def send_video(self):
        ...
    
    def send_location(self):
        ...
    
    def send_chat_action(self):
        ...
    
    def get_user_profile_photos(self):
        ...
    
    def get_updates(self, timeout=..., offset=...):
        ...
    
    def set_webhook(self):
        ...
    


